openapi: "3.0.0"
info:
  title: Geoimagenet API
  description: API for Geoimagenet
  version: 1.0.0
servers:
  - url: /api/v1
    description: Production server
paths:
  /:
    get:
      summary: General information
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfo'

  /users:
    get:
      summary: "Users: Search users"
      parameters:
        - name: username
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: Not found
          content:
            application/json: {}

  /users/{username}:
    get:
      summary: "Users: Get by username"
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Not found
          content:
            application/json: {}

  /taxonomy_classes:
    get:
      summary: "Taxonomy classes: Search"
      parameters:
        - name: taxonomy_name
          description: >
                       Full name or sluggified name of the taxonomy.
                       Example of name slug for "Couverture de sol": couverture-de-sol
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: query
          schema:
            type: integer
        - name: name
          description: Name of the taxonomy class
          in: query
          schema:
            type: string
        - name: depth
          in: query
          description: The depth of taxonomy class children to return. -1 means infinite and is the default.
          schema:
            type: integer
            default: -1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxonomyClass'
        404:
          description: Not found
          content:
            application/json: {}
        400:
          description: Bad request
          content:
            application/json: {}

  /taxonomy_classes/{id}:
    get:
      summary: "Taxonomy classes: Get by id"
      parameters:
        - name: id
          in: path
          description: The id of the taxonomy class
          required: true
          schema:
            type: integer
        - name: depth
          in: query
          description: The depth of taxonomy class children to return. -1 means infinite and is the default.
          schema:
            type: integer
            default: -1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyClass'
        404:
          description: Not found
          content:
            application/json: {}

  /taxonomy:
    get:
      summary: "Taxonomy: Search"
      parameters:
        - name: name
          in: query
          description: >
                       Full name or sluggified name of the taxonomy.
                       Example of name slug for "Couverture de sol": couverture-de-sol
          schema:
            type: string
        - name: version
          description: The version of the taxonomy. `name` is required if version is provided.
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxonomyGroup'
        404:
          description: Not found
          content:
            application/json: {}
        400:
          description: Bad request
          content:
            application/json: {}

  /taxonomy/{name_slug}/{version}:
    get:
      summary: "Taxonomy: Get by name slug and version"
      operationId: geoimagenet_api.routes.taxonomy.get_by_slug
      parameters:
        - name: name_slug
          in: path
          description: 'Example of name slug for "Couverture de sol": couverture-de-sol'
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: The version of the taxonomy
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Taxonomy'
        404:
          description: Not found
          content:
            application/json: {}

  /batches:
    get:
      summary: "Batches: Get the validated annotations"
      operationId: geoimagenet_api.routes.batches.get_annotations
      parameters:
        - name: taxonomy_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GeoJsonFeatureCollection'
        404:
          description: Taxonomy id not found
          content:
            application/json: {}
    post:
      summary: "Batches: Create"
      description: >-
                    Forwards information to the batch creation process.
                    On success, the returned body is the same as the one
                    forwarded to the batch creation service.
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BatchPost'
      responses:
        202:
          description: The batch has been successfully forwarded to the batch creation service.
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BatchPostForwarded'
        404:
          description: Taxonomy id not found
          content:
            application/json: {}
        503:
          description: There was a problem with the batch creation service.
          content:
            application/json: {}

  /annotations/release:
    post:
      summary: "Annotations: Release"
      description: >-
                   To specify which annotations to update: provide either a list of annotation ids or a taxonomy class id.
                   You can also include the children of this taxonomy class by specifying 'with_taxonomy_children=true'.
      operationId: geoimagenet_api.routes.annotations.update_status_release
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotationStatusUpdate'
      responses:
        204:
          description: No Content
        404:
          description: One of the provided ids were not not found.
          content:
            application/json: {}
        400:
          description: Bad request
          content:
            application/json: {}
        403:
          description: Status update refused
          content:
            application/json: {}

  /annotations/validate:
    post:
      summary: "Annotations: Validate"
      description: >-
                   To specify which annotations to update: provide either a list of annotation ids or a taxonomy class id.
                   You can also include the children of this taxonomy class by specifying 'with_taxonomy_children=true'.
      operationId: geoimagenet_api.routes.annotations.update_status_validate
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotationStatusUpdate'
      responses:
        204:
          description: No Content
        404:
          description: One of the provided ids were not not found.
          content:
            application/json: {}
        400:
          description: Bad request
          content:
            application/json: {}
        403:
          description: Status update refused
          content:
            application/json: {}

  /annotations/reject:
    post:
      summary: "Annotations: Reject"
      description: >-
                   To specify which annotations to update: provide either a list of annotation ids or a taxonomy class id.
                   You can also include the children of this taxonomy class by specifying 'with_taxonomy_children=true'.
      operationId: geoimagenet_api.routes.annotations.update_status_reject
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotationStatusUpdate'
      responses:
        204:
          description: No Content
        404:
          description: One of the provided ids were not not found.
          content:
            application/json: {}
        400:
          description: Bad request
          content:
            application/json: {}
        403:
          description: Status update refused
          content:
            application/json: {}

  /annotations/delete:
    post:
      summary: "Annotations: Delete"
      description: >-
                   To specify which annotations to update: provide either a list of annotation ids or a taxonomy class id.
                   You can also include the children of this taxonomy class by specifying 'with_taxonomy_children=true'.
      operationId: geoimagenet_api.routes.annotations.update_status_delete
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AnnotationStatusUpdate'
      responses:
        204:
          description: No Content
        404:
          description: One of the provided ids were not not found.
          content:
            application/json: {}
        400:
          description: Bad request
          content:
            application/json: {}
        403:
          description: Status update refused
          content:
            application/json: {}

  /annotations/counts/{taxonomy_class_id}:
    get:
      summary: "Annotations: Counts per taxonomy class"
      operationId: geoimagenet_api.routes.annotations.counts
      parameters:
        - name: taxonomy_class_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        200:
          description: Annotations count
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AnnotationCounts'
        404:
          description: Taxonomy Class id not found.
          content:
            application/json: {}

  /annotations:
    post:
      summary: "Annotations: Add new"
      parameters:
        - name: srid
          description: Valid SRID integer parameter (it must exist in the spatial_ref_sys table)
          in: query
          required: false
          schema:
            type: integer
            default: 3857
      requestBody:
        content:
          application/json:
            schema:
              description: GeoJson annotation to be written to the database. The default CRS is EPSG:3857.
              oneOf:
                - $ref: '#/components/schemas/GeoJsonFeature'
                - $ref: '#/components/schemas/GeoJsonFeatureCollection'
      responses:
        201:
          description: The ids of the created annotations
          content:
            application/json:
              schema:
                description: The ids of the created annotations
                type: array
                items:
                  type: integer
    put:
      summary: "Annotations: Update"
      description: >-
                   The only properties that are updated are 'geometry', 'taxonomy_class_id' and 'image_name'.
                   Other properties are ignored.
      parameters:
        - name: srid
          description: Valid SRID integer parameter (it must exist in the spatial_ref_sys table)
          in: query
          required: false
          schema:
            type: integer
            default: 3857
      requestBody:
        content:
          application/json:
            schema:
              description: List of GeoJson annotations to be modified. The default CRS is EPSG:3857.
              oneOf:
                - $ref: '#/components/schemas/GeoJsonFeature'
                - $ref: '#/components/schemas/GeoJsonFeatureCollection'
      responses:
        204:
          description: No Content
        404:
          description: Annotation id not found
          content:
            application/json: {}

components:
  schemas:
    ApiInfo:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        version:
          type: string
        authors:
          type: string
        email:
          type: string
        documetation_url:
          type: string
        changelog_url:
          type: string

    GeoJsonFeatureCollection:
      type: object
      description: GeoJson FeatureCollection
      required:
        - type
        - features
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.3
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        crs:
          type: object
          properties:
            type:
              type: string
            properties:
              type: object
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeoJsonFeature'

    GeoJsonFeature:
      type: object
      description: >-
                   "GeoJson Feature. Id is always a string, but can be of the OpenLayers type "
                   "(ex: 'annotation.1234') or integer type (ex: '1234') depending on context"
      required:
        - type
        - geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.2
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          type: string
        geometry:
          oneOf:
            - $ref: '#/components/schemas/Point'
            - $ref: '#/components/schemas/LineString'
            - $ref: '#/components/schemas/Polygon'
            - $ref: '#/components/schemas/MultiPolygon'
        properties:
          $ref: '#/components/schemas/AnnotationProperties'

    Point:
      type: object
      description: GeoJson Point
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#appendix-A.1
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          $ref: '#/components/schemas/Point3D'

    LineString:
      type: object
      description: GeoJson LineString
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#appendix-A.2
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Point3D'

    Polygon:
      type: object
      description: GeoJson Polygon
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#appendix-A.3
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/Point3D'

    MultiPolygon:
      type: object
      description: GeoJson MultiPolygon
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#appendix-A.6
      properties:
        type:
          type: string
          enum:
            - MultiPolygon
        coordinates:
          type: array
          items:
            type: array
            items:
              type: array
              items:
                $ref: '#/components/schemas/Point3D'

    Point3D:
      type: array
      description: Point in 2D or 3D space
      minItems: 2
      maxItems: 3
      items:
        type: number

    AnnotationStatusUpdate:
      type: object
      description: Request body to update the status of an annotation.
      oneOf:
        - $ref: '#/components/schemas/AnnotationStatusUpdateIds'
        - $ref: '#/components/schemas/AnnotationStatusUpdateTaxonomyClass'

    AnnotationStatusUpdateIds:
      type: object
      description: Request body to update the status of an annotation.
      required:
        - annotation_ids
      properties:
        annotation_ids:
          type: array
          description: >
                       'annotation_ids' must be an array of string like: ['annotation.1234', 'annotation.1235', ...].
                       This is the standard OpenLayers format.
          items:
            type: string

    AnnotationStatusUpdateTaxonomyClass:
      type: object
      description: Request body to update the status of an annotation.
      required:
        - taxonomy_class_id
      properties:
        taxonomy_class_id:
          type: integer
          format: int64
        with_taxonomy_children:
          type: boolean
          description: If true, the taxonomy_class_id will also include its children.
          default: true

    AnnotationProperties:
      type: object
      required:
        - taxonomy_class_id
        - image_name
      properties:
        annotator_id:
          type: integer
        taxonomy_class_id:
          type: integer
        image_name:
          type: string
        status:
          $ref: '#/components/schemas/AnnotationStatuses'

    AnnotationStatuses:
      type: string
      enum:
        - new
        - pre_released
        - released
        - review
        - validated
        - rejected
        - deleted
    User:
      type: object
      required:
        - id
        - username
        - name
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string

    TaxonomyClass:
      type: object
      required:
        - id
        - name
        - taxonomy_id
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        taxonomy_id:
          type: integer
          format: int64
        children:
          type: array
          items:
            $ref: '#/components/schemas/TaxonomyClass'

    AnnotationCounts:
      type: object
      description: A dictionnary of type `Dict[str, AnnotationCountPerStatus]` where the keys are the taxonomy_class_id.
      additionalProperties:
        $ref: '#/components/schemas/AnnotationCountPerStatus'

    AnnotationCountPerStatus:
      type: object
      description: An object containing annotation counts per status.
      properties:
        new:
          type: integer
        pre_released:
          type: integer
        released:
          type: integer
        review:
          type: integer
        validated:
          type: integer
        rejected:
          type: integer
        deleted:
          type: integer

    Taxonomy:
      type: object
      required:
        - id
        - name
        - slug
        - version
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        slug:
          type: string
        version:
          type: string
        root_taxonomy_class_id:
          type: integer
          format: int64

    TaxonomyGroup:
      type: object
      required:
        - name
        - slug
        - versions
      properties:
        name:
          type: string
        slug:
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/TaxonomyVersion'

    TaxonomyVersion:
      type: object
      required:
        - taxonomy_id
        - version
      properties:
        taxonomy_id:
          type: integer
          format: int64
        root_taxonomy_class_id:
          type: integer
          format: int64
        version:
          type: string

    BatchPost:
      type: object
      required:
        - name
        - taxonomy_id
      properties:
        name:
          type: string
        taxonomy_id:
          type: integer
          format: int64
        overwrite:
          type: boolean
          default: false

    BatchPostForwarded:
      type: object
      required:
        - inputs
      properties:
        inputs:
          type: array
          items:
            $ref: '#/components/schemas/ExecuteIO'
        outputs:
          type: array
          items:
            $ref: '#/components/schemas/ExecuteIO'

    ExecuteIO:
      type: object
      required:
        - id
      properties:
        id:
          type: string
        value:
          oneOf:
            - type: string
            - type: number
            - type: integer
            - type: boolean
        href:
          type: string