openapi: "3.0.0"
info:
  title: Geoimagenet API
  description: API for Geoimagenet
  version: 1.0.0
servers:
  - url: /api/v1
    description: Production server
paths:
  /:
    get:
      summary: General information
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ApiInfo'
  /users:
    get:
      summary: "Users: Search users"
      parameters:
        - name: username
          in: query
          schema:
            type: string
        - name: name
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        404:
          description: Not found
          content:
            application/json: {}
    post:
      summary: "Users: Add a user"
      parameters:
        - name: username
          in: query
          required: true
          schema:
            type: string
        - name: name
          in: query
          required: true
          schema:
            type: string
      responses:
        201:
          description: The person created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
  /users/{username}:
    get:
      summary: "Users: Get by username"
      parameters:
        - name: username
          in: path
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        404:
          description: Not found
          content:
            application/json: {}
  /taxonomy_classes:
    get:
      summary: "Taxonomy classes: Search"
      parameters:
        - name: taxonomy_name
          description: Full name or sluggified name of the taxonomy
          in: query
          required: true
          schema:
            type: string
        - name: id
          in: query
          schema:
            type: integer
        - name: name
          description: Name of the taxonomy class
          in: query
          schema:
            type: string
        - name: depth
          in: query
          description: The depth of taxonomy class children to return. -1 means infinite and is the default.
          schema:
            type: integer
            default: -1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxonomyClass'
        404:
          description: Not found
          content:
            application/json: {}
        400:
          description: Bad request
          content:
            application/json: {}

  /taxonomy_classes/{id}:
    get:
      summary: "Taxonomy classes: Get by id"
      parameters:
        - name: id
          in: path
          description: The id of the taxonomy class
          required: true
          schema:
            type: integer
        - name: depth
          in: query
          description: The depth of taxonomy class children to return. -1 means infinite and is the default.
          schema:
            type: integer
            default: -1
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TaxonomyClass'
        404:
          description: Not found
          content:
            application/json: {}

  /taxonomy:
    get:
      summary: "Taxonomy: Search"
      parameters:
        - name: name
          in: query
          description: Full name or sluggified name of the taxonomy
          schema:
            type: string
        - name: version
          description: The version of the taxonomy. `name` is required if version is provided.
          in: query
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TaxonomyGroup'
        404:
          description: Not found
          content:
            application/json: {}
        400:
          description: Bad request
          content:
            application/json: {}

  /taxonomy/{name_slug}/{version}:
    get:
      summary: "Taxonomy: Get by name slug and version"
      description: 'Example of name slug for "Couverture de sol": couverture-de-sol'
      operationId: geoimagenet_api.routes.taxonomy.get_by_slug
      parameters:
        - name: name_slug
          in: path
          description: The name slug of the taxonomy
          required: true
          schema:
            type: string
        - name: version
          in: path
          description: The version of the taxonomy
          required: true
          schema:
            type: string
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Taxonomy'
        404:
          description: Not found
          content:
            application/json: {}


  /annotations/release:
    post:
      summary: "Annotations: Release annotation by taxonomy class"
      operationId: geoimagenet_api.routes.annotations.release
      parameters:
        - name: taxonomy_class_id
          in: query
          required: true
          schema:
            type: integer
      responses:
        204:
          description: No Content
        404:
          description: Taxonomy Class id not found.
          content:
            application/json: {}
  /annotations:
    post:
      summary: "Annotations: Add new"
      requestBody:
        content:
          application/json:
            schema:
              description: GeoJson annotation to be written to the database
              oneOf:
                - $ref: '#/components/schemas/GeoJsonFeature'
                - $ref: '#/components/schemas/GeoJsonFeatureCollection'
      responses:
        201:
          description: The ids of the created annotations
          content:
            application/json:
              schema:
                description: The id of the created annotation
                type: array
                items:
                  type: integer
    put:
      summary: "Annotations: Update"
      requestBody:
        content:
          application/json:
            schema:
              description: List of GeoJson annotations to be modified
              oneOf:
                - $ref: '#/components/schemas/GeoJsonFeature'
                - $ref: '#/components/schemas/GeoJsonFeatureCollection'
      responses:
        204:
          description: No Content
        404:
          description: Annotation id not found
          content:
            application/json: {}
    delete:
      summary: "Annotations: Delete"
      requestBody:
        content:
          application/json:
            schema:
              description: List of ids to be deleted
              type: array
              items:
                example: 'annotation.32409'
                type: string
      responses:
        204:
          description: No Content
        404:
          description: Annotation id not found
          content:
            application/json: {}

components:
  schemas:
    ApiInfo:
      type: object
      additionalProperties: false
      properties:
        name:
          type: string
        version:
          type: string
        authors:
          type: string
        email:
          type: string
        documetation_url:
          type: string
        changelog_url:
          type: string
    GeoJsonFeatureCollection:
      type: object
      description: GeoJson Feature collection
      required:
        - type
        - features
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.3
      properties:
        type:
          type: string
          enum:
            - FeatureCollection
        features:
          type: array
          items:
            $ref: '#/components/schemas/GeoJsonFeature'
    GeoJsonFeature:
      type: object
      description: GeoJson Feature
      required:
        - type
        - geometry
      externalDocs:
        url: https://tools.ietf.org/html/rfc7946#section-3.2
      properties:
        type:
          type: string
          enum:
            - Feature
        id:
          type: string
        geometry:
          oneOf:
            - $ref: '#/components/schemas/Point'
            - $ref: '#/components/schemas/LineString'
            - $ref: '#/components/schemas/Polygon'
        properties:
          $ref: '#/components/schemas/AnnotationProperties'
    Point:
      type: object
      description: GeoJson geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id2
      properties:
        type:
          type: string
          enum:
            - Point
        coordinates:
          $ref: '#/components/schemas/Point3D'
    LineString:
      type: object
      description: GeoJson geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id3
      properties:
        type:
          type: string
          enum:
            - LineString
        coordinates:
          type: array
          items:
            $ref: '#/components/schemas/Point3D'
    Polygon:
      type: object
      description: GeoJson geometry
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id4
      properties:
        type:
          type: string
          enum:
            - Polygon
        coordinates:
          type: array
          items:
            type: array
            items:
              $ref: '#/components/schemas/Point3D'
    Point3D:
      type: array
      description: Point in 3D space
      externalDocs:
        url: http://geojson.org/geojson-spec.html#id2
      minItems: 2
      maxItems: 3
      items:
        type: number
    AnnotationProperties:
      type: object
      required:
        - taxonomy_class_id
        - image_name
      properties:
        annotator_id:
          type: integer
        taxonomy_class_id:
          type: integer
        image_name:
          type: string
        status:
          type: string
    User:
      type: object
      required:
        - id
        - username
        - name
      properties:
        id:
          type: integer
          format: int64
        username:
          type: string
        name:
          type: string
    TaxonomyClass:
      type: object
      required:
        - id
        - name
        - taxonomy_id
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        taxonomy_id:
          type: integer
          format: int64
        children:
          type: array
          items:
            $ref: '#/components/schemas/TaxonomyClass'
    Taxonomy:
      type: object
      required:
        - id
        - name
        - slug
        - version
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        slug:
          type: string
        version:
          type: string
        taxonomy_class_root_id:
          type: integer
          format: int64
    TaxonomyGroup:
      type: object
      required:
        - name
        - slug
        - versions
      properties:
        name:
          type: string
        slug:
          type: string
        versions:
          type: array
          items:
            $ref: '#/components/schemas/TaxonomyVersion'
    TaxonomyVersion:
      type: object
      required:
        - taxonomy_id
        - version
      properties:
        taxonomy_id:
          type: integer
          format: int64
        taxonomy_class_root_id:
          type: integer
          format: int64
        version:
          type: string
    Validation:
      type: object
      required:
        - id
        - annotation_id
        - validator_id
      properties:
        id:
          type: integer
          format: int64
        annotation_id:
          type: integer
          format: int64
        validator_id:
          type: integer
          format: int64
        created_at:
          type: string
          format: date-time
    ValidationPost:
      type: object
      required:
        - annotation_ids
        - validator_id
      properties:
        annotation_ids:
          type: array
          items:
            type: integer
        validator_id:
          type: integer
          format: int64